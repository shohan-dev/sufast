name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-rust:
    name: Lint Rust Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      - name: Run Rust formatter check
        run: cargo fmt --check --manifest-path=rust-core/Cargo.toml
      - name: Run Rust clippy
        run: cargo clippy --manifest-path=rust-core/Cargo.toml -- -D warnings

  lint-python:
    name: Lint Python Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          pip install -e .[dev]
      - name: Run Python formatter check
        run: |
          black --check python/
          isort --check-only python/
      - name: Run Python linter
        run: flake8 python/
      - name: Run Python type checker
        run: mypy python/sufast/

  test-rust:
    name: Test Rust Core
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Run Rust tests
        run: cargo test --manifest-path=rust-core/Cargo.toml --verbose
      - name: Run Rust benchmarks
        run: cargo bench --manifest-path=rust-core/Cargo.toml

  build-rust:
    name: Build Rust Libraries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build release binary
        run: cargo build --release --manifest-path=rust-core/Cargo.toml
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-libs-${{ matrix.os }}
          path: |
            rust-core/target/release/*.dll
            rust-core/target/release/*.so
            rust-core/target/release/*.dylib

  test-python:
    name: Test Python Package
    runs-on: ${{ matrix.os }}
    needs: build-rust
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download Rust artifacts
        uses: actions/download-artifact@v3
        with:
          name: rust-libs-${{ matrix.os }}
          path: python/sufast/
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e python/[dev]
      - name: Run Python tests
        run: |
          cd python
          python -m pytest tests/ -v --cov=sufast --cov-report=xml
      - name: Run integration tests
        run: |
          cd python
          python -m pytest tests/integration/ -v
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: python/coverage.xml

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Rust security audit
        uses: actions-rs/audit@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Python security audit
        run: |
          python -m pip install safety bandit
          cd python
          safety check
          bandit -r sufast/

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: build-rust
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Download Rust artifacts
        uses: actions/download-artifact@v3
        with:
          name: rust-libs-ubuntu-latest
          path: python/sufast/
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e python/[dev]
      - name: Run performance tests
        run: |
          cd python
          python -m pytest tests/performance/ -v --benchmark-only

  release:
    name: Release Package
    runs-on: ubuntu-latest
    needs: [test-rust, test-python, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Download all Rust artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      - name: Prepare distribution
        run: |
          cd python
          python -m pip install --upgrade pip build twine
          # Copy platform-specific binaries
          cp ../artifacts/rust-libs-ubuntu-latest/*.so sufast/ || true
          cp ../artifacts/rust-libs-windows-latest/*.dll sufast/ || true
          cp ../artifacts/rust-libs-macos-latest/*.dylib sufast/ || true
          python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd python
          python -m twine upload dist/*
